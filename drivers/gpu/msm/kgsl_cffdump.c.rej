--- drivers/gpu/msm/kgsl_cffdump.c
+++ drivers/gpu/msm/kgsl_cffdump.c
@@ -9,10 +9,16 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ *
  */
 
 /* #define DEBUG */
-#define ALIGN_CPU
+/* #define ALIGN_CPU */
+#define APP_DIR		"kgsl-cff"
 
 #include <linux/spinlock.h>
 #include <linux/debugfs.h>
@@ -20,14 +26,11 @@
 #include <linux/slab.h>
 #include <linux/time.h>
 #include <linux/sched.h>
-#include <mach/socinfo.h>
 
 #include "kgsl.h"
+#include "kgsl_pm4types.h"
 #include "kgsl_cffdump.h"
-#include "kgsl_debugfs.h"
-#include "kgsl_log.h"
-#include "kgsl_sharedmem.h"
-#include "adreno_pm4types.h"
+
 
 static struct rchan	*chan;
 static struct dentry	*dir;
@@ -53,7 +56,7 @@
 	unsigned char op;
 	uint addr;
 	uint value;
-} __packed;
+} __attribute__((packed));
 
 #define CFF_OP_POLL_REG         0x00000004
 struct cff_op_poll_reg {
@@ -61,13 +64,14 @@
 	uint addr;
 	uint value;
 	uint mask;
-} __packed;
+} __attribute__((packed));
 
 #define CFF_OP_WAIT_IRQ         0x00000005
 struct cff_op_wait_irq {
 	unsigned char op;
-} __packed;
+} __attribute__((packed));
 
+#define CFF_OP_VERIFY_MEM_FILE  0x00000007
 #define CFF_OP_RMW              0x0000000a
 
 #define CFF_OP_WRITE_MEM        0x0000000b
@@ -75,7 +79,7 @@
 	unsigned char op;
 	uint addr;
 	uint value;
-} __packed;
+} __attribute__((packed));
 
 #define CFF_OP_WRITE_MEMBUF     0x0000000c
 struct cff_op_write_membuf {
@@ -83,36 +87,12 @@
 	uint addr;
 	ushort count;
 	uint buffer[MEMBUF_SIZE];
-} __packed;
-
-#define CFF_OP_MEMORY_BASE	0x0000000d
-struct cff_op_memory_base {
-	unsigned char op;
-	uint base;
-	uint size;
-	uint gmemsize;
-} __packed;
-
-#define CFF_OP_HANG		0x0000000e
-struct cff_op_hang {
-	unsigned char op;
-} __packed;
+} __attribute__((packed));
 
 #define CFF_OP_EOF              0xffffffff
 struct cff_op_eof {
 	unsigned char op;
-} __packed;
-
-#define CFF_OP_VERIFY_MEM_FILE  0x00000007
-#define CFF_OP_WRITE_SURFACE_PARAMS 0x00000011
-struct cff_op_user_event {
-	unsigned char op;
-	unsigned int op1;
-	unsigned int op2;
-	unsigned int op3;
-	unsigned int op4;
-	unsigned int op5;
-} __packed;
+} __attribute__((packed));
 
 
 static void b64_encodeblock(unsigned char in[3], unsigned char out[4], int len)
@@ -188,12 +168,6 @@
 
 	uint addr = cff_op_write_membuf.addr
 		- sizeof(uint)*cff_op_write_membuf.count;
-
-	if (!cff_op_write_membuf.count) {
-		pr_warn("kgsl: cffdump: membuf: count == 0, skipping");
-		return;
-	}
-
 	if (cff_op_write_membuf.count != 1) {
 		cff_op_write_membuf.op = CFF_OP_WRITE_MEMBUF;
 		cff_op_write_membuf.addr = addr;
@@ -215,24 +189,19 @@
 }
 
 static void cffdump_printline(int id, uint opcode, uint op1, uint op2,
-	uint op3, uint op4, uint op5)
+	uint op3)
 {
 	struct cff_op_write_reg cff_op_write_reg;
 	struct cff_op_poll_reg cff_op_poll_reg;
 	struct cff_op_wait_irq cff_op_wait_irq;
-	struct cff_op_memory_base cff_op_memory_base;
-	struct cff_op_hang cff_op_hang;
 	struct cff_op_eof cff_op_eof;
-	struct cff_op_user_event cff_op_user_event;
 	unsigned char out_buf[sizeof(cff_op_write_membuf)/3*4 + 16];
 	void *data;
 	int len = 0, out_size;
 	long cur_secs;
 
-	spin_lock(&cffdump_lock);
 	if (opcode == CFF_OP_WRITE_MEM) {
-		if (op1 < 0x40000000 || op1 >= 0x60000000)
-			KGSL_CORE_ERR("addr out-of-range: op1=%08x", op1);
+		spin_lock(&cffdump_lock);
 		if ((cff_op_write_membuf.addr != op1 &&
 			cff_op_write_membuf.count)
 			|| (cff_op_write_membuf.count == MEMBUF_SIZE))
@@ -242,9 +211,11 @@
 		cff_op_write_membuf.addr = op1 + sizeof(uint);
 		spin_unlock(&cffdump_lock);
 		return;
-	} else if (cff_op_write_membuf.count)
+	} else if (cff_op_write_membuf.count) {
+		spin_lock(&cffdump_lock);
 		cffdump_membuf(id, out_buf, sizeof(out_buf));
-	spin_unlock(&cffdump_lock);
+		spin_unlock(&cffdump_lock);
+	}
 
 	switch (opcode) {
 	case CFF_OP_WRITE_REG:
@@ -270,38 +241,11 @@
 		len = sizeof(cff_op_wait_irq);
 		break;
 
-	case CFF_OP_MEMORY_BASE:
-		cff_op_memory_base.op = opcode;
-		cff_op_memory_base.base = op1;
-		cff_op_memory_base.size = op2;
-		cff_op_memory_base.gmemsize = op3;
-		data = &cff_op_memory_base;
-		len = sizeof(cff_op_memory_base);
-		break;
-
-	case CFF_OP_HANG:
-		cff_op_hang.op = opcode;
-		data = &cff_op_hang;
-		len = sizeof(cff_op_hang);
-		break;
-
 	case CFF_OP_EOF:
 		cff_op_eof.op = opcode;
 		data = &cff_op_eof;
 		len = sizeof(cff_op_eof);
 		break;
-
-	case CFF_OP_WRITE_SURFACE_PARAMS:
-	case CFF_OP_VERIFY_MEM_FILE:
-		cff_op_user_event.op = opcode;
-		cff_op_user_event.op1 = op1;
-		cff_op_user_event.op2 = op2;
-		cff_op_user_event.op3 = op3;
-		cff_op_user_event.op4 = op4;
-		cff_op_user_event.op5 = op5;
-		data = &cff_op_user_event;
-		len = sizeof(cff_op_user_event);
-		break;
 	}
 
 	if (len) {
@@ -322,27 +266,20 @@
 
 void kgsl_cffdump_init()
 {
-	struct dentry *debugfs_dir = kgsl_get_debugfs_dir();
-
 #ifdef ALIGN_CPU
 	cpumask_t mask;
 
 	cpumask_clear(&mask);
-	cpumask_set_cpu(0, &mask);
+	cpumask_set_cpu(1, &mask);
 	sched_setaffinity(0, &mask);
 #endif
-	if (!debugfs_dir || IS_ERR(debugfs_dir)) {
-		KGSL_CORE_ERR("Debugfs directory is bad\n");
-		return;
-	}
-
 	kgsl_cff_dump_enable = 1;
 
 	spin_lock_init(&cffdump_lock);
 
-	dir = debugfs_create_dir("cff", debugfs_dir);
+	dir = debugfs_create_dir(APP_DIR, NULL);
 	if (!dir) {
-		KGSL_CORE_ERR("debugfs_create_dir failed\n");
+		pr_err("kgsl: cffdump: couldn't create relay app directory.\n");
 		return;
 	}
 
@@ -360,49 +297,19 @@
 
 void kgsl_cffdump_open(enum kgsl_deviceid device_id)
 {
-	/*TODO: move this to where we can report correct gmemsize*/
-	unsigned int va_base;
-
-	if (cpu_is_msm8x60() || cpu_is_msm8960() || cpu_is_msm8930())
-		va_base = 0x40000000;
-	else
-		va_base = 0x20000000;
-
-	kgsl_cffdump_memory_base(device_id, va_base,
-			CONFIG_MSM_KGSL_PAGE_TABLE_SIZE, SZ_256K);
-}
-
-void kgsl_cffdump_memory_base(enum kgsl_deviceid device_id, unsigned int base,
-			      unsigned int range, unsigned gmemsize)
-{
-	cffdump_printline(device_id, CFF_OP_MEMORY_BASE, base,
-			range, gmemsize, 0, 0);
-}
-
-void kgsl_cffdump_hang(enum kgsl_deviceid device_id)
-{
-	cffdump_printline(device_id, CFF_OP_HANG, 0, 0, 0, 0, 0);
 }
 
 void kgsl_cffdump_close(enum kgsl_deviceid device_id)
 {
-	cffdump_printline(device_id, CFF_OP_EOF, 0, 0, 0, 0, 0);
-}
-
-void kgsl_cffdump_user_event(unsigned int cff_opcode, unsigned int op1,
-		unsigned int op2, unsigned int op3,
-		unsigned int op4, unsigned int op5)
-{
-	cffdump_printline(-1, cff_opcode, op1, op2, op3, op4, op5);
+	cffdump_printline(device_id, CFF_OP_EOF, 0, 0, 0);
 }
 
 void kgsl_cffdump_syncmem(struct kgsl_device_private *dev_priv,
-	const struct kgsl_memdesc *memdesc, uint gpuaddr, uint sizebytes,
+	const struct kgsl_memdesc *memdesc, uint addr, uint sizebytes,
 	bool clean_cache)
 {
 	const void *src;
 	uint host_size;
-	uint physaddr;
 
 	if (!kgsl_cff_dump_enable)
 		return;
@@ -413,48 +320,46 @@
 		struct kgsl_mem_entry *entry;
 		spin_lock(&dev_priv->process_priv->mem_lock);
 		entry = kgsl_sharedmem_find_region(dev_priv->process_priv,
-			gpuaddr, sizebytes);
+			addr, sizebytes);
 		spin_unlock(&dev_priv->process_priv->mem_lock);
 		if (entry == NULL) {
-			KGSL_CORE_ERR("did not find mapping "
-				"for gpuaddr: 0x%08x\n", gpuaddr);
+			pr_err("kgsl: cffdump: sync-mem: did not find mapping "
+				"for gpuaddr: 0x%08x\n", addr);
 			return;
 		}
 		memdesc = &entry->memdesc;
 	}
-	BUG_ON(memdesc->gpuaddr == 0);
-	BUG_ON(gpuaddr == 0);
-	physaddr = kgsl_get_realaddr(memdesc) + (gpuaddr - memdesc->gpuaddr);
 
-	src = kgsl_gpuaddr_to_vaddr(memdesc, gpuaddr, &host_size);
+	src = kgsl_gpuaddr_to_vaddr(memdesc, addr, &host_size);
 	if (src == NULL || host_size < sizebytes) {
-		KGSL_CORE_ERR("did not find mapping for "
-			"gpuaddr: 0x%08x, m->host: 0x%p, phys: 0x%08x\n",
-			gpuaddr, memdesc->hostptr, memdesc->physaddr);
+		pr_err("kgsl: cffdump: sync-mem: did not find mapping for "
+			"gpuaddr: 0x%08x, m->host: 0x%p, phys: 0x%08x\n", addr,
+			memdesc->hostptr, memdesc->physaddr);
 		return;
 	}
 
 	if (clean_cache) {
 		/* Ensure that this memory region is not read from the
 		 * cache but fetched fresh */
-
-		mb();
-
-		kgsl_cache_range_op((struct kgsl_memdesc *)memdesc,
-				KGSL_CACHE_OP_INV);
+		if (!memdesc->physaddr)
+			pr_err("kgsl: cffdump: syncmem: no physaddr");
+		else if ((memdesc->priv & KGSL_MEMFLAGS_VMALLOC_MEM)) {
+			dsb(); wmb(); mb();
+			kgsl_cache_range_op((ulong)memdesc->physaddr,
+				memdesc->size, KGSL_MEMFLAGS_CACHE_INV |
+				KGSL_MEMFLAGS_VMALLOC_MEM);
+		} else
+			pr_err("kgsl: cffdump: syncmem: not vmalloc mem");
 	}
 
-	BUG_ON(physaddr > 0x66000000 && physaddr < 0x66ffffff);
 	while (sizebytes > 3) {
-		cffdump_printline(-1, CFF_OP_WRITE_MEM, gpuaddr, *(uint *)src,
-			0, 0, 0);
-		gpuaddr += 4;
+		cffdump_printline(-1, CFF_OP_WRITE_MEM, addr, *(uint *)src, 0);
+		addr += 4;
 		src += 4;
 		sizebytes -= 4;
 	}
 	if (sizebytes > 0)
-		cffdump_printline(-1, CFF_OP_WRITE_MEM, gpuaddr, *(uint *)src,
-			0, 0, 0);
+		cffdump_printline(-1, CFF_OP_WRITE_MEM, addr, *(uint *)src, 0);
 }
 
 void kgsl_cffdump_setmem(uint addr, uint value, uint sizebytes)
@@ -462,18 +367,15 @@
 	if (!kgsl_cff_dump_enable)
 		return;
 
-	BUG_ON(addr > 0x66000000 && addr < 0x66ffffff);
 	while (sizebytes > 3) {
 		/* Use 32bit memory writes as long as there's at least
 		 * 4 bytes left */
-		cffdump_printline(-1, CFF_OP_WRITE_MEM, addr, value,
-				0, 0, 0);
+		cffdump_printline(-1, CFF_OP_WRITE_MEM, addr, value, 0);
 		addr += 4;
 		sizebytes -= 4;
 	}
 	if (sizebytes > 0)
-		cffdump_printline(-1, CFF_OP_WRITE_MEM, addr, value,
-				0, 0, 0);
+		cffdump_printline(-1, CFF_OP_WRITE_MEM, addr, value, 0);
 }
 
 void kgsl_cffdump_regwrite(enum kgsl_deviceid device_id, uint addr,
@@ -482,8 +384,7 @@
 	if (!kgsl_cff_dump_enable)
 		return;
 
-	cffdump_printline(device_id, CFF_OP_WRITE_REG, addr, value,
-			0, 0, 0);
+	cffdump_printline(device_id, CFF_OP_WRITE_REG, addr, value, 0);
 }
 
 void kgsl_cffdump_regpoll(enum kgsl_deviceid device_id, uint addr,
@@ -492,8 +393,7 @@
 	if (!kgsl_cff_dump_enable)
 		return;
 
-	cffdump_printline(device_id, CFF_OP_POLL_REG, addr, value,
-			mask, 0, 0);
+	cffdump_printline(device_id, CFF_OP_POLL_REG, addr, value, mask);
 }
 
 void kgsl_cffdump_slavewrite(uint addr, uint value)
@@ -501,7 +401,7 @@
 	if (!kgsl_cff_dump_enable)
 		return;
 
-	cffdump_printline(-1, CFF_OP_WRITE_REG, addr, value, 0, 0, 0);
+	cffdump_printline(-1, CFF_OP_WRITE_REG, addr, value, 0);
 }
 
 int kgsl_cffdump_waitirq(void)
@@ -509,7 +409,7 @@
 	if (!kgsl_cff_dump_enable)
 		return 0;
 
-	cffdump_printline(-1, CFF_OP_WAIT_IRQ, 0, 0, 0, 0, 0);
+	cffdump_printline(-1, CFF_OP_WAIT_IRQ, 0, 0, 0);
 
 	return 1;
 }
@@ -526,8 +426,8 @@
 	static uint size_stack[ADDRESS_STACK_SIZE];
 
 	switch (GET_PM4_TYPE3_OPCODE(hostaddr)) {
-	case CP_INDIRECT_BUFFER_PFD:
-	case CP_INDIRECT_BUFFER:
+	case PM4_INDIRECT_BUFFER_PFD:
+	case PM4_INDIRECT_BUFFER:
 	{
 		/* traverse indirect buffers */
 		int i;
@@ -545,14 +445,15 @@
 			size_stack[kgsl_cffdump_addr_count++] = ibsize;
 
 			if (kgsl_cffdump_addr_count >= ADDRESS_STACK_SIZE) {
-				KGSL_CORE_ERR("stack overflow\n");
+				pr_err("kgsl: cffdump: parse-ib, stack "
+					"overflow\n");
 				return false;
 			}
 
 			return kgsl_cffdump_parse_ibs(dev_priv, NULL,
 				ibaddr, ibsize, check_only);
 		} else if (size_stack[i] != ibsize) {
-			KGSL_CORE_ERR("gpuaddr: 0x%08x, "
+			pr_err("kgsl: cffdump: parse-ib: gpuaddr: 0x%08x, "
 				"wc: %u, with size wc: %u already on the "
 				"stack\n", ibaddr, ibsize, size_stack[i]);
 			return false;
@@ -599,7 +500,7 @@
 
 	hostaddr = (uint *)kgsl_gpuaddr_to_vaddr(memdesc, gpuaddr, &host_size);
 	if (hostaddr == NULL) {
-		KGSL_CORE_ERR("did not find mapping for "
+		pr_err("kgsl: cffdump: parse-ib: did not find mapping for "
 			"gpuaddr: 0x%08x\n", gpuaddr);
 		return true;
 	}
@@ -609,11 +510,18 @@
 	level++;
 
 	if (!memdesc->physaddr) {
-		KGSL_CORE_ERR("no physaddr");
+		pr_err("kgsl: cffdump: syncmem: no physaddr");
+		return true;
+	} else if ((memdesc->priv & KGSL_MEMFLAGS_VMALLOC_MEM)) {
+		dsb(); wmb(); mb();
+		/* Ensure that this memory region is not read from the
+		 * cache but fetched fresh */
+		kgsl_cache_range_op((unsigned long)memdesc->physaddr,
+			memdesc->size, KGSL_MEMFLAGS_CACHE_INV |
+			KGSL_MEMFLAGS_VMALLOC_MEM);
 	} else {
-		mb();
-		kgsl_cache_range_op((struct kgsl_memdesc *)memdesc,
-				KGSL_CACHE_OP_INV);
+		pr_err("kgsl: cffdump: syncmem: not vmalloc mem");
+		return true;
 	}
 
 #ifdef DEBUG
@@ -689,17 +597,9 @@
 		pr_info("kgsl: cffdump: parsing failed: gpuaddr:0x%08x, "
 			"host:0x%p, wc:%d\n", gpuaddr, hoststart, sizedwords);
 
-	if (!check_only) {
-#ifdef DEBUG
-		uint offset = gpuaddr - memdesc->gpuaddr;
-		pr_info("kgsl: cffdump: ib-dump: hostptr:%p, gpuaddr:%08x, "
-			"physaddr:%08x, offset:%d, size:%d", hoststart,
-			gpuaddr, memdesc->physaddr + offset, offset,
-			sizedwords*4);
-#endif
-		kgsl_cffdump_syncmem(dev_priv, memdesc, gpuaddr, sizedwords*4,
-			false);
-	}
+	if (!check_only)
+		kgsl_cffdump_syncmem(dev_priv, memdesc, gpuaddr,
+			sizedwords*4, false);
 
 	level--;
 
@@ -774,7 +674,7 @@
 	chan = relay_open("cpu", dir, subbuf_size,
 			  n_subbufs, &relay_callbacks, NULL);
 	if (!chan) {
-		KGSL_CORE_ERR("relay_open failed\n");
+		pr_err("kgsl: cffdump: relay: app channel creation failed\n");
 		return NULL;
 	}
 
@@ -785,7 +685,7 @@
 }
 
 /**
- *	destroy_channel - destroys channel /debug/kgsl/cff/cpuXXX
+ *	destroy_channel - destroys channel /debug/APP_DIR/cpuXXX
  *
  *	Destroys channel along with associated produced/consumed control files
  */
@@ -798,4 +698,3 @@
 	}
 }
 
-
