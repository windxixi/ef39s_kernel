--- drivers/gpu/msm/kgsl_pwrctrl.h
+++ drivers/gpu/msm/kgsl_pwrctrl.h
@@ -1,42 +1,63 @@
-/* Copyright (c) 2010-2011, Code Aurora Forum. All rights reserved.
+/* Copyright (c) 2010, Code Aurora Forum. All rights reserved.
  *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ *       copyright notice, this list of conditions and the following
+ *       disclaimer in the documentation and/or other materials provided
+ *       with the distribution.
+ *     * Neither the name of Code Aurora Forum, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived
+ *       from this software without specific prior written permission.
  *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-#ifndef __KGSL_PWRCTRL_H
-#define __KGSL_PWRCTRL_H
+#ifndef _GSL_PWRCTRL_H
+#define _GSL_PWRCTRL_H
 
+#include <linux/types.h>
+#include <linux/wait.h>
+#include <linux/clk.h>
+#include <linux/mutex.h>
+#include <mach/clk.h>
 #include <mach/internal_power_rail.h>
+#include <linux/pm_qos_params.h>
 
 /*****************************************************************************
 ** power flags
 *****************************************************************************/
-#define KGSL_PWRFLAGS_ON   1
-#define KGSL_PWRFLAGS_OFF  0
+#define KGSL_PWRFLAGS_POWER_OFF		0x00000001
+#define KGSL_PWRFLAGS_POWER_ON		0x00000002
+#define KGSL_PWRFLAGS_CLK_ON		0x00000004
+#define KGSL_PWRFLAGS_CLK_OFF		0x00000008
+#define KGSL_PWRFLAGS_AXI_ON		0x00000010
+#define KGSL_PWRFLAGS_AXI_OFF		0x00000020
+#define KGSL_PWRFLAGS_IRQ_ON		0x00000040
+#define KGSL_PWRFLAGS_IRQ_OFF		0x00000080
 
-#define KGSL_PWRLEVEL_TURBO 0
-#define KGSL_PWRLEVEL_NOMINAL 1
-#define KGSL_PWRLEVEL_LOW_OFFSET 2
+#define BW_INIT 0
+#define BW_MAX  1
 
-#define KGSL_MAX_CLKS 5
-
-struct platform_device;
-
-struct kgsl_busy {
-	struct timeval start;
-	struct timeval stop;
-	int on_time;
-	int time;
-	int on_time_old;
-	int time_old;
-	unsigned int no_nap_cnt;
+enum kgsl_clk_freq {
+	KGSL_AXI_HIGH = 0,
+	KGSL_MIN_FREQ = 1,
+	KGSL_DEFAULT_FREQ = 2,
+	KGSL_MAX_FREQ = 3,
+	KGSL_NUM_FREQ = 4
 };
 
 struct kgsl_pwrctrl {
@@ -44,45 +65,36 @@
 	int have_irq;
 	unsigned int pwr_rail;
 	struct clk *ebi1_clk;
-	struct clk *grp_clks[KGSL_MAX_CLKS];
-	unsigned long power_flags;
-	struct kgsl_pwrlevel pwrlevels[KGSL_MAX_PWRLEVELS];
-	unsigned int active_pwrlevel;
-	int thermal_pwrlevel;
-	unsigned int num_pwrlevels;
+	struct clk *grp_clk;
+	struct clk *grp_pclk;
+	struct clk *grp_src_clk;
+	struct clk *imem_clk;
+	struct clk *imem_pclk;
+	unsigned int power_flags;
+	unsigned int clk_freq[KGSL_NUM_FREQ];
 	unsigned int interval_timeout;
 	struct regulator *gpu_reg;
 	uint32_t pcl;
 	unsigned int nap_allowed;
-	const char *regulator_name;
-	const char *irq_name;
-	const char *src_clk_name;
-	s64 time;
-	struct kgsl_busy busy;
+	unsigned int io_fraction;
+	unsigned int io_count;
+	struct kgsl_yamato_context *suspended_ctxt;
+	bool pwrrail_first;
 };
 
-void kgsl_pwrctrl_clk(struct kgsl_device *device, int state);
-void kgsl_pwrctrl_axi(struct kgsl_device *device, int state);
-void kgsl_pwrctrl_pwrrail(struct kgsl_device *device, int state);
-void kgsl_pwrctrl_irq(struct kgsl_device *device, int state);
-int kgsl_pwrctrl_init(struct kgsl_device *device);
+int kgsl_pwrctrl_clk(struct kgsl_device *device, unsigned int pwrflag);
+int kgsl_pwrctrl_axi(struct kgsl_device *device, unsigned int pwrflag);
+int kgsl_pwrctrl_pwrrail(struct kgsl_device *device, unsigned int pwrflag);
+int kgsl_pwrctrl_irq(struct kgsl_device *device, unsigned int pwrflag);
 void kgsl_pwrctrl_close(struct kgsl_device *device);
 void kgsl_timer(unsigned long data);
 void kgsl_idle_check(struct work_struct *work);
 void kgsl_pre_hwaccess(struct kgsl_device *device);
 void kgsl_check_suspended(struct kgsl_device *device);
 int kgsl_pwrctrl_sleep(struct kgsl_device *device);
-void kgsl_pwrctrl_wake(struct kgsl_device *device);
-void kgsl_pwrctrl_pwrlevel_change(struct kgsl_device *device,
-	unsigned int level);
+int kgsl_pwrctrl_wake(struct kgsl_device *device);
+
 int kgsl_pwrctrl_init_sysfs(struct kgsl_device *device);
 void kgsl_pwrctrl_uninit_sysfs(struct kgsl_device *device);
-void kgsl_pwrctrl_enable(struct kgsl_device *device);
-void kgsl_pwrctrl_disable(struct kgsl_device *device);
-static inline unsigned long kgsl_get_clkrate(struct clk *clk)
-{
-	return (clk != NULL) ? clk_get_rate(clk) : 0;
-}
-
-#endif /* __KGSL_PWRCTRL_H */
 
+#endif /* _GSL_PWRCTRL_H */
